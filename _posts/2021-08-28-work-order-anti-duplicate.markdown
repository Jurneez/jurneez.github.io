---
layout: post
title: 工作笔记之下单防重
tags: [工作笔记, 下单防重]
image: '/images/posts/8.jpg'
---

> 背景

用户下单/二次提交发货的时候，可能会多次调用cart.MakeCheckout接口，对于同一个相同的请求，产生多个相同的订单。

> 方案预想

做幂等/防重。

>  知识点

防重：指重复多次提交同样的交易指令或者订单请求到后台，系统必须能够去重，防止重复执行。

幂等：在多个同样的交易指令或请求同时或者先后到达后台，即使重复执行，系统也必须始终提供与一致的状态，而不能有其他的副作用。

--- 

#### 方案选择：防重

> 原因

订单id是在请求发送到后台后生成的，且又一个单独的生成规则，与传入的其他请求信息无关。所以，每一个传到后端的请求都会生成一个不同的订单id，基于这种情况，选择防重的方案，在请求到后台之后，后台开始执行之前，进行是否重复请求的判断。

> 实现

用redis缓存。每次请求到后端之后，都去redis查找一下，看之前时候有相同的请求进来。如果有，就返回空，也不用报错（为了保险起见，这里先做告警，出现问题就留意一下，后面确认无误后，可以考虑删除）。如果没有，就接着执行。

key：customerId+ 总支付金额 ——》 组成支付串 ----》某种方式加密

value取值：请求进入后台的时间

有效期：key的有效期为30s

> 缺点

key值可能会冲突，导致其他正常的数据无法下单.

应对方法：我觉得这种概率应该很小，1、md5是比较严格的加密方式，2、时刻留意告警，出现这种问题及时查看

> 优点:

防重

